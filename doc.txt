-- INISIASI PROYEK
npm init -y
npm install express nanoid

-- Requirement Project :
1. Kriteria 1 : Aplikasi menggunakan port 9000
2. Kriteria 2 : Aplikasi dijalankan dengan perintah npm run start.
3. Kriteria 3 : API dapat menyimpan buku
4. Kriteria 4 : API dapat menampilkan seluruh buku
5. Kriteria 5 : API dapat menampilkan detail buku (By ID)
6. Kriteria 6 : API dapat mengubah data buku
7. Kriteria 7 : API dapat menghapus buku


-- Job Done 

1. Kriteria 1 : Aplikasi menggunakan port 9000
2. Kriteria 2 : Aplikasi dijalankan dengan perintah npm run start.
3. Kriteria 3 : API dapat menyimpan buku
4. Kriteria 4 : API dapat menampilkan seluruh buku
5. Kriteria 5 : API dapat menampilkan detail buku (By ID)
6. Kriteria 6 : API dapat mengubah data buku
7. Kriteria 7 : API dapat menghapus buku


-- Format request for JSON
- POST Data [JSON Format Request]
   - Format Data yang dimasukkan :
      {
       "name": string,
       "year": number,
       "author": string,
       "summary": string,
       "publisher": string,
       "pageCount": number,
       "readPage": number,
       "reading": boolean
      }

    - Format data yang dimasukkan :
            {
            "id": "Qbax5Oy7L8WKf74l",
            "name": "Buku A",
            "year": 2010,
            "author": "John Doe",
            "summary": "Lorem ipsum dolor sit amet",
            "publisher": "Dicoding Indonesia",
            "pageCount": 100,
            "readPage": 25,
            "finished": false,
            "reading": false,
            "insertedAt": "2021-03-04T09:11:44.598Z",
            "updatedAt": "2021-03-04T09:11:44.598Z"
        }

- GET All Data [JSON Format Request]
    - Format jika data buku ingin ditampilkan :
            {
            "status": "success",
            "data": {
                "books": [
                    {
                        "id": "Qbax5Oy7L8WKf74l",
                        "name": "Buku A",
                        "publisher": "Dicoding Indonesia"
                    },
                    {
                        "id": "1L7ZtDUFeGs7VlEt",
                        "name": "Buku B",
                        "publisher": "Dicoding Indonesia"
                    },
                    {
                        "id": "K8DZbfI-t3LrY7lD",
                        "name": "Buku C",
                        "publisher": "Dicoding Indonesia"
                    }
                ]
            }
        }

    - Format jika Tidak ada data :
            {
            "status": "success",
            "data": {
                "books": []
            }
        }

- GET Data By ID [JSON Format Request]
    - Format data yang ditampilkan menurut ID 
            {
            "status": "success",
            "data": {
                "book": {
                    "id": "aWZBUW3JN_VBE-9I",
                    "name": "Buku A Revisi",
                    "year": 2011,
                    "author": "Jane Doe",
                    "summary": "Lorem Dolor sit Amet",
                    "publisher": "Dicoding",
                    "pageCount": 200,
                    "readPage": 26,
                    "finished": false,
                    "reading": false,
                    "insertedAt": "2021-03-05T06:14:28.930Z",
                    "updatedAt": "2021-03-05T06:14:30.718Z"
                }
            }
        }

- PUT Data By ID [JSON Format Request]
    - Data yang bisa di edit :
            {
            "name": string,
            "year": number,
            "author": string,
            "summary": string,
            "publisher": string,
            "pageCount": number,
            "readPage": number,
            "reading": boolean
        } 

    - Format jika Gagal :

        Client tidak melampirkan properti name pada request body. Bila hal ini terjadi, maka server akan merespons dengan:
        Status Code : 400

        Response Body:

        {
            "status": "fail",
            "message": "Gagal memperbarui buku. Mohon isi nama buku"
        }

        Client melampirkan nilai properti readPage yang lebih besar dari nilai properti pageCount. Bila hal ini terjadi, maka server akan merespons dengan:
        Status Code : 400

        Response Body:

        {
            "status": "fail",
            "message": "Gagal memperbarui buku. readPage tidak boleh lebih besar dari pageCount"
        }

        Idyang dilampirkan oleh client tidak ditemukkan oleh server. Bila hal ini terjadi, maka server akan merespons dengan:

        Status Code : 404

        Response Body:

        {
            "status": "fail",
            "message": "Gagal memperbarui buku. Id tidak ditemukan"
        }

    - Format Jika buku berhasil di UPDATE :
            {
            "status": "success",
            "message": "Buku berhasil diperbarui"
        }


- DELETE Data By ID [JSON Format Request]
    API yang Anda buat harus dapat menghapus buku berdasarkan id melalui route berikut:

    Method : DELETE
    URL: /books/{bookId}

    Bila id yang dilampirkan tidak dimiliki oleh buku manapun, maka server harus mengembalikan respons berikut:

    Status Code : 404

    Response Body:

    {
        "status": "fail",
        "message": "Buku gagal dihapus. Id tidak ditemukan"
    }

    Bila id dimiliki oleh salah satu buku, maka buku tersebut harus dihapus dan server mengembalikan respons berikut:

    Status Code : 200

    Response Body:

    {
        "status": "success",
        "message": "Buku berhasil dihapus"
    }
